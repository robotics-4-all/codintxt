Model:
    imports*=Import
    metadata=Metadata
    brokers*=MessageBroker
	components*=VisualComponent
;

Metadata:
    'Metadata'
    (
        ('name:' name=STRING)
        ('description:' description=STRING)?
        ('author:' author=STRING)?
        ('email:' email=STRING)?
        ('token:' token=STRING)?
    )#
    'end'
;

Placement:
    'x:' x=INT
    'y:' y=INT
    'width:' w=INT
    'height:' h=INT
;


VisualComponent:
    Gauge           |
    LogsDisplay     |
    ValueDisplay    |
    AliveDisplay    |
    JsonViewer      |
    PlotView        |
    Plot            |
    Button          |
    ButtonGroup
;


Gauge:
'Gauge' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('position:' position=Placement)
    ('attribute:' attribute=STRING)
    ('minValue:' minValue=FLOAT)
    ('maxValue:' maxValue=FLOAT)
    ('leftColor:' leftColor=Color)?
    ('rightColor:' rightColor=Color)?
    ('levels:' levels=INT)?
    ('hideTxt:' hideTxt=BOOL)?
    ('unit:' unit=STRING)?
)#
'end'
;

LogsDisplay:
'LogsDisplay' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('attribute:' attribute=STRING)
    ('maxMessages:' maxMsg=INT)?
    ('highlights:' '-' colorKeys*=Highlight['-'])?
    ('position:' position=Placement)
)#
'end'
;

ValueDisplay:
'ValueDisplay' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('position:' position=Placement)
    ('attribute:' attribute=STRING)
    ('unit:' unit=STRING)?
)#
'end'
;

AliveDisplay:
'AliveDisplay' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('position:' position=Placement)
    ('timeout:' timeout=INT)?  // ms
)#
'end'
;

JsonViewer:
'JsonViewer' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('position:' position=Placement)
    ('attribute:' attribute=STRING)?
)#
'end'
;

Button:
'Button' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('dynamic:' dynamic=BOOL)?
    ('color:' color=Color)?
    ('background:' bg=Color)?
    ('hover:' hover=Color)?
    ('payload:' '-' payload*=Attribute['-'])
)#
'end'
;

AlignType:
    'Center' |
    'Left' |
    'Right' |
    'Top' |
    'Bottom' |
    'Horizontal' |
    'Vertical'
;

ButtonGroup:
'ButtonGroup' name=ID
(
    ('label:' label=STRING)
    ('alignTxt:' alignTxt=AlignType)?
    ('alignBtns:' alignBtns=AlignType)?
    ('buttons:' '-' buttons*=[Button]['-'])
    ('position:' position=Placement)
)#
'end'
;

Plot:
'Plot' name=ID
(
    ('label:' label=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=[MessageBroker])
    ('ptype:' ptype=PlotType)
    ('attribute:' attribute=STRING)
    ('color:' color=Color)?
    ('smooth:' smooth=BOOL)?
    ('verticalGrid:' verticalGrid=BOOL)?
    ('horizontalGrid:' horizontalGrid=BOOL)?
    ('xAxis:' xAxis=BOOL)?
    ('yAxis:' yAxis=BOOL)?
    ('legend:' legend=BOOL)?
    ('maxValues:' maxValues=INT)?
    ('legendPosition:' legendPosition=AlignType)?
)#
'end'
;

PlotView:
'PlotView' name=ID
(
    ('label:' label=STRING)
    ('position:' position=Placement)
    ('plots:' '-' plots*=[Plot]['-'])
)#
'end'
;

PlotType:
    'Line' |
    'Bar'
;

Highlight:
    'key:' key=STRING
    'color:' color=Color
;

// TODO
Color:
    'Red'		|
    'Blue'		|
	'Yellow'	|
	'Green'
;

MessageBroker:
    AMQPBroker | MQTTBroker | RedisBroker
;


BrokerConnection:
    ('ref' ':' ref=[MessageBroker:FQN])
    ('auth' ':' auth=Authentication)?
;


Authentication: AuthPlain | AuthApiKey | AuthCert;

AuthPlain:
    'username' ':' username=STRING
    'password' ':' password=STRING
;

AuthApiKey:
    'key' ':' key=STRING
;

AuthCert:
    ('cert' ':' cert=STRING) | ('certPath' ':' certPath=STRING)
;

AMQPBroker:
    'Broker<AMQP>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('vhost:' vhost=STRING)?
        ('topicExchange:' topicE=STRING)?
        ('rpcExchange:' rpcE=STRING)?
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;

MQTTBroker:
    'Broker<MQTT>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('basePath:' basePath=STRING)?
        ('webPath:' webPath=STRING)?
        ('webPort:' webPort=INT)?
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;

RedisBroker:
    'Broker<Redis>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('db:' db=INT)?
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;

Attribute:
    NumericAttribute    |
    BoolAttribute       |
    StringAttribute     |
    TimeAttribute       |
    ListAttribute       |
    DictAttribute
;

NumericAttribute:
    IntAttribute | FloatAttribute
;

IntAttribute:
    name=ID ':' 'int' ('=' default=INT)?
;

FloatAttribute:
    name=ID ':' 'float' ('=' default=FLOAT)?
;

StringAttribute:
    name=ID ':' 'str' ('=' default=STRING)?
;

BoolAttribute:
    name=ID ':' 'bool' ('=' default=BOOL)?
;

ListAttribute:
    name=ID ':' 'list' ('=' '[' default*=OBJECT[','] ']')?
;

DictAttribute:
    name=ID ':' 'dict' ('=' '{' items*=Attribute[','] '}')?
;

TimeAttribute:
    name=ID ':' 'time' ('=' default=Time)?
;

Time:
    hour=INT ':' minute=INT (':' second=INT)?
;

Date: month=INT ':' day=INT ':' year=INT;

// Hours: /[0-2]?[0-9]?/;
// Minutes: /[0-5][0-9]/;

List:
    '[' items*=ListItem[','] ']'
;

ListItem:
    NUMBER | STRING | BOOL | List | Dict | OBJECT
;

Dict:
    '{' items*=DictItem[','] '}'
;

DictItem:
    name=STRING ':' value=DictType
;

DictType:
    NUMBER | STRING | BOOL | Dict | List | OBJECT
;

ADDRESS_ID:
	/([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}/
;

NID:
	/(.*?)\n/
;

FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;

