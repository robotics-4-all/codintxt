Model:
    imports*=Import
    metadata=Metadata
    brokers*=MessageBroker
;

Metadata:
    'Metadata'
    (
        ('name:' name=STRING)
        ('description:' description=STRING)
        ('author:' author=STRING)
        ('token:' token=STRING)
    )#
    'end'
;

Placement:
    'x:' x=INT
    'y:' x=INT
    'width:' x=INT
    'height:' x=INT
;


VisualComponent:
    Gauge           |
    LogsDisplay     |
    ValueDisplay    |
    AliveDisplay    |
    JsonViewer      |
    PlotViewer      |
    Button
;

VisualComponentCommon:
(
    ('name:' name=ID)
    ('label:' name=STRING)
    ('topic:' topic=STRING)
    ('broker:' broker=BrokerConnection)
)#
;

Gauge:
'Gauge' name=ID
(
    (common=VisualComponentCommon)
    ('attribute:' attribute=STRING)
    ('minValue:' minValue=FLOAT)
    ('maxValue:' maxValue=FLOAT)
    ('leftColor:' leftColor=Color)?
    ('rightColor:' rightColor=Color)?
    ('levels:' levels=INT)?
    ('hideTxt:' hideTxt=BOOL)?
    ('unit:' unit=STRING)?
)#
'end'
;

LogsDisplay:
    'name:' name=ID
    'label:' name=STRING
    'topic:' topic=STRING
    'attribute:' attribute=STRING
    'broker:' broker=BrokerConnection
    ('maxMessages:' maxMsg=INT)?
    ('highlights:' '-' colorKeys=Highlight['-'])?
;

ValueDisplay:
    'name:' name=ID
    'label:' name=STRING
    'topic:' topic=STRING
    'attribute:' attribute=STRING
    'broker:' broker=BrokerConnection
    ('unit:' unit=STRING)?
;

AliveDisplay:
    'name:' name=ID
    'label:' name=STRING
    'topic:' topic=STRING
    'broker:' broker=BrokerConnection
    ('timeout:' timeout=INT)?  // ms
;

JsonViewer:
'JsonViewer' name=ID
(
    'label:' name=STRING
    'topic:' topic=STRING
    'broker:' broker=BrokerConnection
    ('attribute:' attribute=STRING)?
)#
'end'
;

Button:
'Button' name=ID
(
    ('name:' name=ID)
    ('label:' name=STRING)
    ('topic:' topic=STRING)
    ('dynamic:' dynamic=BOOL)
    ('color:' color=Color)
    ('background:' bg=Color)
    ('hover:' hover=Color)
    ('broker:' broker=BrokerConnection)
    ('payload:' '-' attribute=Attribute['-'])
)#
'end'
;

AlignType:
    'Center' |
    'Left' |
    'Right' |
    'Top' |
    'Bottom' |
    'Horizontal' |
    'Vertical' |
;

Buttons:
    'name:' name=ID
    'label:' name=STRING
    'alignTxt:' alignTxt=AlignType
    'alignBtns:' alignBtns=AlignType
    'buttons:' buttons*=Button
;

Plot:
    'name:' name=ID
    'label:' name=STRING
    'topic:' topic=STRING
    'ptype:' ptype=PlotType
    'attribute:' attribute=STRING
    'color:' color=Color
    'smooth:' smooth=BOOL
    'verticalGrid:' verticalGrid=BOOL
    'horizontalGrid:' horizontalGrid=BOOL
    'xAxis:' xAxis=BOOL
    'yAxis:' yAxis=BOOL
    'legend:' legend=BOOL
    'maxValues:' maxValues=INT
    'legendPosition:' legendPosition=AlignType
    'broker:' broker=[MessageBroker:FQN]
;

PlotView:
    'name:' name=ID
    'label:' name=STRING

;

PlotType:
    'Line' |
    'Bar'
;

Highlight:
    'key:' key=STRING
    'color:' color=Color
;

// TODO
Color:
    'Red' |
    'Blue'
;

MessageBroker:
    AMQPBroker | MQTTBroker | RedisBroker
;


BrokerConnection:
    'ref' ':' ref=[MessageBroker:FQN]
    'auth' ':' auth=Authentication
;


Authentication: AuthPlain | AuthApiKey | AuthCert;

AuthPlain:
    'username' ':' username=STRING
    'password' ':' password=STRING
;

AuthApiKey:
    'key' ':' key=STRING
;

AuthCert:
    ('cert' ':' cert=STRING) | ('certPath' ':' certPath=STRING)
;

AMQPBroker:
    'Broker<AMQP>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('vhost:' vhost=STRING)?
        ('topicExchange:' topicE=STRING)?
        ('rpcExchange:' rpcE=STRING)?
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;

MQTTBroker:
    'Broker<MQTT>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;

RedisBroker:
    'Broker<Redis>' name=ID
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('db:' db=INT)?
        ('ssl' ':' ssl=BOOL)?
        ('auth' ':' auth=Authentication)?
    )#
    'end'
;


ADDRESS_ID:
	/([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}/
;

NID:
	/(.*?)\n/
;

FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;

